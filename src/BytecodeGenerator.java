import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.List;

/**
 * This class is responsible for generating bytecode for the MiniJava compiler.
 * It contains a list of bytecodes and methods to emit bytecodes.
 * It also has methods to get and set variables, and to display the generated bytecodes.
 */
public class BytecodeGenerator {
    public final List<Bytecode> bytecodes;

    public BytecodeGenerator() {
        this.bytecodes = new ArrayList<>();
    }

    public void emitBytecode(BytecodeType type, Integer arg1, Integer arg2) {
        bytecodes.add(new Bytecode(type, arg1, arg2));
    }
    public void emitBytecode(BytecodeType type, Integer arg1) {
        bytecodes.add(new Bytecode(type, arg1));
    }
    public void emitBytecode(BytecodeType type, String method) {
        bytecodes.add(new Bytecode(type, method));
    }
    public void emitBytecode(BytecodeType type) {
        bytecodes.add(new Bytecode(type));
    }

    // ! This method must be used with `prepareLeftValue`
    public void setVariable(MiniJavaObject indicator) {
        if (indicator.type.isPrimitive()) {
            emitBytecode(BytecodeType.OP_SET_LOCAL, indicator.index);
            return;
        } else if (indicator.type.isClass()) {
            emitBytecode(BytecodeType.OP_SET_FIELD, indicator.index);
            return;
        } else emitBytecode(BytecodeType.OP_SET_INDEX);
    }


    public void displayBytecodes(String filePath) {
        try (PrintWriter writer = new PrintWriter(new FileWriter(filePath))) {
            for (var bytecode : bytecodes) {
                writer.println(bytecode);
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}
